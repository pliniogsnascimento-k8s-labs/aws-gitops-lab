{
  "version": 4,
  "terraform_version": "1.2.2",
  "serial": 39,
  "lineage": "100394d4-93d8-3597-8666-1cdc95f957ca",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "aws_availability_zones",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "all_availability_zones": null,
            "exclude_names": null,
            "exclude_zone_ids": null,
            "filter": [
              {
                "name": "region-name",
                "values": [
                  "us-east-1"
                ]
              }
            ],
            "group_names": [
              "us-east-1"
            ],
            "id": "us-east-1",
            "names": [
              "us-east-1a",
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-east-1f"
            ],
            "state": null,
            "zone_ids": [
              "use1-az4",
              "use1-az6",
              "use1-az1",
              "use1-az2",
              "use1-az3",
              "use1-az5"
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "eks_assume_role_policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3742504898",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Principal\": {\n        \"Federated\": \"arn:aws:iam::499237116720:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1\"\n      },\n      \"Condition\": {\n        \"StringEquals\": {\n          \"oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1:sub\": \"system:serviceaccount:kube-system:aws-node\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "override_policy_documents": null,
            "policy_id": null,
            "source_json": null,
            "source_policy_documents": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRoleWithWebIdentity"
                ],
                "condition": [
                  {
                    "test": "StringEquals",
                    "values": [
                      "system:serviceaccount:kube-system:aws-node"
                    ],
                    "variable": "oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1:sub"
                  }
                ],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "arn:aws:iam::499237116720:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1"
                    ],
                    "type": "Federated"
                  }
                ],
                "resources": [],
                "sid": ""
              },
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "tls_certificate",
      "name": "eks-cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "certificates": [
              {
                "is_ca": true,
                "issuer": "OU=Starfield Class 2 Certification Authority,O=Starfield Technologies\\, Inc.,C=US",
                "not_after": "2034-06-28T17:39:16Z",
                "not_before": "2009-09-02T00:00:00Z",
                "public_key_algorithm": "RSA",
                "serial_number": "12037640545166866303",
                "sha1_fingerprint": "9e99a48a9960b14926bb7f3b02e22da2b0ab7280",
                "signature_algorithm": "SHA256-RSA",
                "subject": "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US",
                "version": 3
              },
              {
                "is_ca": true,
                "issuer": "CN=Starfield Services Root Certificate Authority - G2,O=Starfield Technologies\\, Inc.,L=Scottsdale,ST=Arizona,C=US",
                "not_after": "2037-12-31T01:00:00Z",
                "not_before": "2015-05-25T12:00:00Z",
                "public_key_algorithm": "RSA",
                "serial_number": "144918191876577076464031512351042010504348870",
                "sha1_fingerprint": "06b25927c42a721631c1efd9431e648fa62e1e39",
                "signature_algorithm": "SHA256-RSA",
                "subject": "CN=Amazon Root CA 1,O=Amazon,C=US",
                "version": 3
              },
              {
                "is_ca": true,
                "issuer": "CN=Amazon Root CA 1,O=Amazon,C=US",
                "not_after": "2025-10-19T00:00:00Z",
                "not_before": "2015-10-22T00:00:00Z",
                "public_key_algorithm": "RSA",
                "serial_number": "144918209630989264145272943054026349679957517",
                "sha1_fingerprint": "917e732d330f9a12404f73d8bea36948b929dffc",
                "signature_algorithm": "SHA256-RSA",
                "subject": "CN=Amazon,OU=Server CA 1B,O=Amazon,C=US",
                "version": 3
              },
              {
                "is_ca": false,
                "issuer": "CN=Amazon,OU=Server CA 1B,O=Amazon,C=US",
                "not_after": "2023-06-26T23:59:59Z",
                "not_before": "2022-05-28T00:00:00Z",
                "public_key_algorithm": "RSA",
                "serial_number": "6149291929048875092529459657148644450",
                "sha1_fingerprint": "6b3eb618ca61696a2c216bb3cdac635c694a6616",
                "signature_algorithm": "SHA256-RSA",
                "subject": "CN=oidc.eks.us-east-1.amazonaws.com",
                "version": 3
              }
            ],
            "id": "2022-06-10 01:23:41.855342 +0000 UTC",
            "url": "https://oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1",
            "verify_chain": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "nat_eip",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-03b515e790be3e655",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-03b515e790be3e655",
            "instance": "",
            "network_border_group": "us-east-1",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-44-206-90-209.compute-1.amazonaws.com",
            "public_ip": "44.206.90.209",
            "public_ipv4_pool": "amazon",
            "tags": {
              "Name": "gitops-nat-eip"
            },
            "tags_all": {
              "Name": "gitops-nat-eip"
            },
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eks_addon",
      "name": "eks-addon-coredns",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "addon_name": "coredns",
            "addon_version": "v1.8.7-eksbuild.1",
            "arn": "arn:aws:eks:us-east-1:499237116720:addon/gitops-eks/coredns/9ec0a59a-df0b-aa02-403f-981e37896371",
            "cluster_name": "gitops-eks",
            "created_at": "2022-06-10T01:23:42Z",
            "id": "gitops-eks:coredns",
            "modified_at": "2022-06-10T01:38:27Z",
            "resolve_conflicts": null,
            "service_account_role_arn": "",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eks_addon",
      "name": "eks-addon-kube-proxy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "addon_name": "kube-proxy",
            "addon_version": "v1.22.6-eksbuild.1",
            "arn": "arn:aws:eks:us-east-1:499237116720:addon/gitops-eks/kube-proxy/bec0a59a-df23-7d55-1fdf-c64b42f37a9e",
            "cluster_name": "gitops-eks",
            "created_at": "2022-06-10T01:23:42Z",
            "id": "gitops-eks:kube-proxy",
            "modified_at": "2022-06-10T01:23:44Z",
            "resolve_conflicts": null,
            "service_account_role_arn": "",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eks_addon",
      "name": "eks-addon-vpc-cni",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "addon_name": "vpc-cni",
            "addon_version": "v1.10.1-eksbuild.1",
            "arn": "arn:aws:eks:us-east-1:499237116720:addon/gitops-eks/vpc-cni/92c0a59a-df15-10e3-450c-e7e1d0673351",
            "cluster_name": "gitops-eks",
            "created_at": "2022-06-10T01:23:42Z",
            "id": "gitops-eks:vpc-cni",
            "modified_at": "2022-06-10T01:23:44Z",
            "resolve_conflicts": null,
            "service_account_role_arn": "",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eks_cluster",
      "name": "gitops_eks",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:eks:us-east-1:499237116720:cluster/gitops-eks",
            "certificate_authority": [
              {
                "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1EWXhNREF4TWpBd00xb1hEVE15TURZd056QXhNakF3TTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUF2Cm5TUi9qUUsrUDFmaXhyNmFpeWxRUU5ZbFovRzZrOHVTYmtDYm1VaXBxN0U1cDdmdjVpbENqdkVMbzgzTTRib3kKZ244Z3NIYVliMVRkVzR4YVA2Z1EyaitsZndJdG9Qa2pnVVMwZUQzUGRVNXgxUWJjMFhqcWMzbG00bnRBNlRWOAppL3hoWUZYbVRVMXJ6T2M2TWJOSjZ1WUxLRjZ3eEFLSDdNVWlJdm1vQmdKNmtPQXJTT1haSDNKUkFhd1NXdzhZCldabVRNa3RXeWJFZnNhamxxL2RvWkdBci92SHZCajcwVVBOVE5CVU5ESnEzZENSU1pIaTE0YmtNSmMzNlV3dVYKK29CeExjWDZsSW1GM0lrQWQxd2FQM1RVc3pheHQxTjdlUlFySzNBNkQ2bjZDQzM1RXJLMnY3ejM4Rmp2cXFyVQpSSXBJY2VwYXJQaUVpSGdjTU8wQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZNVWpXbk52TU5Ha09PM2ltczNaRVozaUxpc2VNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSExhWFAxYWFKOUc3YzRJeWdRaQp3ZHhGZXJka3UySTZEQ1dTbTFOWUp4MURlSVU4MEpPdCtNMnp0c0g4d0hZelhacjY3djYvRlNLUU41WTVLQ2NLClRQdkk1WCs4NGZKd253Sjl4SzE1dHp4ZnEreVlRL2VHaW9QK2UzM1hKTE04eVl2bnVSZCt3R2NGQ3VTNmhVUUQKVjM2ZmxYajdMSjJDbkJqZXdtUTZ1VGZjaEpHUHU1OC9ValNlZGZyay8xUlZsUmR4MTF5WE1aZGNRd281ZWw1Qwo1WFM3Q1M3Y010R1U0Q3l5aHlRQ2JXT2dCTnFPdDlKZXlKaThrOEJYU0FtWjNoS1NsdUlpbmpVQThjM1lzeTg0CnBvOTkxUW40WHRzSjlPbDVablQ1V2lsK0todXJnOG0wY3VFNWh1aFE1UnB4VWdnVWlnOGZGY3BvcEF3U0I2VTIKVFhBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
              }
            ],
            "created_at": "2022-06-10 01:13:47.086 +0000 UTC",
            "enabled_cluster_log_types": null,
            "encryption_config": [],
            "endpoint": "https://58AE77842A1EC2D723A6CEE07F0B80B1.gr7.us-east-1.eks.amazonaws.com",
            "id": "gitops-eks",
            "identity": [
              {
                "oidc": [
                  {
                    "issuer": "https://oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1"
                  }
                ]
              }
            ],
            "kubernetes_network_config": [
              {
                "ip_family": "ipv4",
                "service_ipv4_cidr": "172.20.0.0/16"
              }
            ],
            "name": "gitops-eks",
            "platform_version": "eks.2",
            "role_arn": "arn:aws:iam::499237116720:role/gitops-eks-cluster-role",
            "status": "ACTIVE",
            "tags": {
              "Name": "gitops-eks"
            },
            "tags_all": {
              "Name": "gitops-eks"
            },
            "timeouts": null,
            "version": "1.22",
            "vpc_config": [
              {
                "cluster_security_group_id": "sg-0bba2b318ee8e5a2e",
                "endpoint_private_access": false,
                "endpoint_public_access": true,
                "public_access_cidrs": [
                  "0.0.0.0/0"
                ],
                "security_group_ids": null,
                "subnet_ids": [
                  "subnet-023a976256f516130",
                  "subnet-044669095aff8eb0e",
                  "subnet-08368f3e10f51d867",
                  "subnet-0b106bfb0ab5513ff",
                  "subnet-0d94a5cb164ddcd6a",
                  "subnet-0e2782d8fe34ae9d3"
                ],
                "vpc_id": "vpc-0320810a1c5ce6ee3"
              }
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozNjAwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_eks_node_group",
      "name": "eks_ng_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "ami_type": "AL2_x86_64",
            "arn": "arn:aws:eks:us-east-1:499237116720:nodegroup/gitops-eks/gitops-ng-1/62c0a59a-f1ff-4bdb-8279-609005695f55",
            "capacity_type": "SPOT",
            "cluster_name": "gitops-eks",
            "disk_size": 20,
            "force_update_version": null,
            "id": "gitops-eks:gitops-ng-1",
            "instance_types": [
              "t3.small"
            ],
            "labels": null,
            "launch_template": [],
            "node_group_name": "gitops-ng-1",
            "node_group_name_prefix": "",
            "node_role_arn": "arn:aws:iam::499237116720:role/gitops-eks-node-role",
            "release_version": "1.22.6-20220526",
            "remote_access": [],
            "resources": [
              {
                "autoscaling_groups": [
                  {
                    "name": "eks-gitops-ng-1-62c0a59a-f1ff-4bdb-8279-609005695f55"
                  }
                ],
                "remote_access_security_group_id": ""
              }
            ],
            "scaling_config": [
              {
                "desired_size": 3,
                "max_size": 6,
                "min_size": 1
              }
            ],
            "status": "ACTIVE",
            "subnet_ids": [
              "subnet-044669095aff8eb0e",
              "subnet-0b106bfb0ab5513ff",
              "subnet-0e2782d8fe34ae9d3"
            ],
            "tags": {
              "kubernetes.io/cluster/cluster-name/gitops-eks": "owned"
            },
            "tags_all": {
              "kubernetes.io/cluster/cluster-name/gitops-eks": "owned"
            },
            "taint": [],
            "timeouts": null,
            "update_config": [
              {
                "max_unavailable": 2,
                "max_unavailable_percentage": 0
              }
            ],
            "version": "1.22"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozNjAwMDAwMDAwMDAwLCJkZWxldGUiOjM2MDAwMDAwMDAwMDAsInVwZGF0ZSI6MzYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_openid_connect_provider.eks-oid",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role.eks-node-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEC2ContainerRegistryReadOnly",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSWorkerNodePolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKS_CNI_Policy",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.aws_iam_policy_document.eks_assume_role_policy",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_openid_connect_provider",
      "name": "eks-oid",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::499237116720:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1",
            "client_id_list": [
              "sts.amazonaws.com"
            ],
            "id": "arn:aws:iam::499237116720:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1",
            "tags": null,
            "tags_all": {},
            "thumbprint_list": [
              "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
            ],
            "url": "oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "eks-cluster-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::499237116720:role/gitops-eks-cluster-role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2022-06-10T01:13:30Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gitops-eks-cluster-role",
            "inline_policy": [
              {
                "name": "",
                "policy": ""
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "gitops-eks-cluster-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AROAXIPGZ3MYM4YIHAUTS"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "eks-node-role",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::499237116720:role/gitops-eks-node-role",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Federated\":\"arn:aws:iam::499237116720:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1\"},\"Action\":\"sts:AssumeRoleWithWebIdentity\",\"Condition\":{\"StringEquals\":{\"oidc.eks.us-east-1.amazonaws.com/id/58AE77842A1EC2D723A6CEE07F0B80B1:sub\":\"system:serviceaccount:kube-system:aws-node\"}}},{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2022-06-10T01:23:45Z",
            "description": "",
            "force_detach_policies": false,
            "id": "gitops-eks-node-role",
            "inline_policy": [
              {
                "name": "",
                "policy": ""
              }
            ],
            "managed_policy_arns": [],
            "max_session_duration": 3600,
            "name": "gitops-eks-node-role",
            "name_prefix": "",
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AROAXIPGZ3MYE4QBMQM2A"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_openid_connect_provider.eks-oid",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.aws_iam_policy_document.eks_assume_role_policy",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gitops-AmazonEC2ContainerRegistryReadOnly",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gitops-eks-node-role-20220610012349527500000008",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
            "role": "gitops-eks-node-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_openid_connect_provider.eks-oid",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role.eks-node-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.aws_iam_policy_document.eks_assume_role_policy",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gitops-AmazonEKSClusterPolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gitops-eks-cluster-role-20220610011335323400000002",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
            "role": "gitops-eks-cluster-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.eks-cluster-role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gitops-AmazonEKSVPCResourceController",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gitops-eks-cluster-role-20220610011335302200000001",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
            "role": "gitops-eks-cluster-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_iam_role.eks-cluster-role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gitops-AmazonEKSWorkerNodePolicy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gitops-eks-node-role-20220610012349502500000006",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
            "role": "gitops-eks-node-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_openid_connect_provider.eks-oid",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role.eks-node-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.aws_iam_policy_document.eks_assume_role_policy",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "gitops-AmazonEKS_CNI_Policy",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "gitops-eks-node-role-20220610012349514900000007",
            "policy_arn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
            "role": "gitops-eks-node-role"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_openid_connect_provider.eks-oid",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role.eks-node-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "data.aws_iam_policy_document.eks_assume_role_policy",
            "data.tls_certificate.eks-cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "igw",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:internet-gateway/igw-098c452945acb77a2",
            "id": "igw-098c452945acb77a2",
            "owner_id": "499237116720",
            "tags": {
              "Name": "gitops-igw"
            },
            "tags_all": {
              "Name": "gitops-igw"
            },
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_vpc.eks_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "gitops-nat",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation_id": "eipalloc-03b515e790be3e655",
            "connectivity_type": "public",
            "id": "nat-0849e7233a4d07750",
            "network_interface_id": "eni-04b989a0c050c6c0b",
            "private_ip": "10.0.55.96",
            "public_ip": "44.206.90.209",
            "subnet_id": "subnet-023a976256f516130",
            "tags": {
              "Name": "gitops-eks-nat"
            },
            "tags_all": {
              "Name": "gitops-eks-nat"
            }
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eip.nat_eip",
            "aws_internet_gateway.igw",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "nat_route_table",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:route-table/rtb-0a03db7384eacbd8e",
            "id": "rtb-0a03db7384eacbd8e",
            "owner_id": "499237116720",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "nat-0849e7233a4d07750",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "gitops-eks-nat-route-table"
            },
            "tags_all": {
              "Name": "gitops-eks-nat-route-table"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_eip.nat_eip",
            "aws_internet_gateway.igw",
            "aws_nat_gateway.gitops-nat",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table",
      "name": "public_route_table",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:route-table/rtb-0643af96a939119a5",
            "id": "rtb-0643af96a939119a5",
            "owner_id": "499237116720",
            "propagating_vgws": [],
            "route": [
              {
                "carrier_gateway_id": "",
                "cidr_block": "0.0.0.0/0",
                "destination_prefix_list_id": "",
                "egress_only_gateway_id": "",
                "gateway_id": "igw-098c452945acb77a2",
                "instance_id": "",
                "ipv6_cidr_block": "",
                "local_gateway_id": "",
                "nat_gateway_id": "",
                "network_interface_id": "",
                "transit_gateway_id": "",
                "vpc_endpoint_id": "",
                "vpc_peering_connection_id": ""
              }
            ],
            "tags": {
              "Name": "gitops-public-route-table"
            },
            "tags_all": {
              "Name": "gitops-public-route-table"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwLCJ1cGRhdGUiOjEyMDAwMDAwMDAwMH19",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_vpc.eks_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-08f327154667a9ded",
            "route_table_id": "rtb-0a03db7384eacbd8e",
            "subnet_id": "subnet-044669095aff8eb0e"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eip.nat_eip",
            "aws_internet_gateway.igw",
            "aws_nat_gateway.gitops-nat",
            "aws_route_table.nat_route_table",
            "aws_subnet.private_subnet_1",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private_b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0822e827119a8d9b1",
            "route_table_id": "rtb-0a03db7384eacbd8e",
            "subnet_id": "subnet-0b106bfb0ab5513ff"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eip.nat_eip",
            "aws_internet_gateway.igw",
            "aws_nat_gateway.gitops-nat",
            "aws_route_table.nat_route_table",
            "aws_subnet.private_subnet_2",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "private_n",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0ee5db505a2532d01",
            "route_table_id": "rtb-0a03db7384eacbd8e",
            "subnet_id": "subnet-0e2782d8fe34ae9d3"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eip.nat_eip",
            "aws_internet_gateway.igw",
            "aws_nat_gateway.gitops-nat",
            "aws_route_table.nat_route_table",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-09fbe48775fd7a47c",
            "route_table_id": "rtb-0643af96a939119a5",
            "subnet_id": "subnet-023a976256f516130"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_route_table.public_route_table",
            "aws_subnet.public_subnet_1",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public_b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-0a75aee21143e0d9c",
            "route_table_id": "rtb-0643af96a939119a5",
            "subnet_id": "subnet-08368f3e10f51d867"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_route_table.public_route_table",
            "aws_subnet.public_subnet_2",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route_table_association",
      "name": "public_c",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "gateway_id": "",
            "id": "rtbassoc-03580db594c5d61af",
            "route_table_id": "rtb-0643af96a939119a5",
            "subnet_id": "subnet-0d94a5cb164ddcd6a"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_internet_gateway.igw",
            "aws_route_table.public_route_table",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "allow_http",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:security-group/sg-0ebd0497cb4fb05a2",
            "description": "Allow HTTP inbound traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0ebd0497cb4fb05a2",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "HTTP Rule",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH Rule",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              }
            ],
            "name": "allow_http",
            "name_prefix": "",
            "owner_id": "499237116720",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "allow_http"
            },
            "tags_all": {
              "Name": "allow_http"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.eks_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "cluster_nodes_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:security-group/sg-0977a7e787efaf1ba",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0977a7e787efaf1ba",
            "ingress": [],
            "name": "cluster-nodes-sg",
            "name_prefix": "",
            "owner_id": "499237116720",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "cluster nodes sg"
            },
            "tags_all": {
              "Name": "cluster nodes sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-0e1a0bf0d6e76deee"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_subnet_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-044669095aff8eb0e",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az4",
            "cidr_block": "10.0.0.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-044669095aff8eb0e",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private_subnet_1",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "private_subnet_1",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_subnet_2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-0b106bfb0ab5513ff",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az6",
            "cidr_block": "10.0.16.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0b106bfb0ab5513ff",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private_subnet_2",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "private_subnet_2",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_subnet_3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-0e2782d8fe34ae9d3",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az6",
            "cidr_block": "10.0.32.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0e2782d8fe34ae9d3",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "private_subnet_3",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "private_subnet_3",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public_subnet_1",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-023a976256f516130",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1a",
            "availability_zone_id": "use1-az4",
            "cidr_block": "10.0.48.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-023a976256f516130",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public_subnet_1",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "public_subnet_1",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public_subnet_2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-08368f3e10f51d867",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az6",
            "cidr_block": "10.0.64.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-08368f3e10f51d867",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public_subnet_2",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "public_subnet_2",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public_subnet_3",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:subnet/subnet-0d94a5cb164ddcd6a",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-east-1b",
            "availability_zone_id": "use1-az6",
            "cidr_block": "10.0.80.0/20",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0d94a5cb164ddcd6a",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "499237116720",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": {
              "Name": "public_subnet_3",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "tags_all": {
              "Name": "public_subnet_3",
              "kubernetes.io/cluster/gitops-eks": "shared"
            },
            "timeouts": null,
            "vpc_id": "vpc-0320810a1c5ce6ee3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "eks_vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:499237116720:vpc/vpc-0320810a1c5ce6ee3",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-0db3726043c18a1c9",
            "default_route_table_id": "rtb-0ead6971f04970eb5",
            "default_security_group_id": "sg-08964bc0a6121258c",
            "dhcp_options_id": "dopt-afe0a2d4",
            "enable_classiclink": false,
            "enable_classiclink_dns_support": false,
            "enable_dns_hostnames": false,
            "enable_dns_support": true,
            "id": "vpc-0320810a1c5ce6ee3",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-0ead6971f04970eb5",
            "owner_id": "499237116720",
            "tags": {
              "Name": "eks_vpc"
            },
            "tags_all": {
              "Name": "eks_vpc"
            }
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo-apps",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "status": "tainted",
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-cd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.3.4",
                "chart": "argo-cd",
                "name": "argo-cd",
                "namespace": "argocd",
                "revision": 1,
                "values": "{\"apiVersionOverrides\":{\"certmanager\":\"\",\"ingress\":\"\"},\"configs\":{\"clusterCredentials\":[],\"credentialTemplates\":{},\"gpgKeys\":{},\"gpgKeysAnnotations\":{},\"knownHosts\":{\"data\":{\"ssh_known_hosts\":\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n\"}},\"knownHostsAnnotations\":{},\"repositories\":{},\"repositoryCredentials\":{},\"secret\":{\"annotations\":{},\"argocdServerTlsConfig\":{},\"bitbucketServerSecret\":\"\",\"bitbucketUUID\":\"\",\"createSecret\":true,\"extra\":{},\"githubSecret\":\"\",\"gitlabSecret\":\"\",\"gogsSecret\":\"\"},\"tlsCerts\":{},\"tlsCertsAnnotations\":{}},\"controller\":{\"affinity\":{},\"args\":{\"appResyncPeriod\":\"180\",\"operationProcessors\":\"10\",\"repoServerTimeoutSeconds\":\"60\",\"selfHealTimeout\":\"5\",\"statusProcessors\":\"20\"},\"clusterAdminAccess\":{\"enabled\":true},\"clusterRoleRules\":{\"enabled\":false,\"rules\":[]},\"containerPort\":8082,\"containerSecurityContext\":{},\"enableStatefulSet\":false,\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"rules\":{\"enabled\":false,\"spec\":[]},\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8082},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"relabelings\":[]}},\"name\":\"application-controller\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8082,\"portName\":\"https-controller\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-application-controller\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"createAggregateRoles\":false,\"dex\":{\"affinity\":{},\"containerPortGrpc\":5557,\"containerPortHttp\":5556,\"containerPortMetrics\":5558,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"envFrom\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"ghcr.io/dexidp/dex\",\"tag\":\"v2.30.0\"},\"initImage\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{}},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"relabelings\":[]}},\"name\":\"dex-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"enabled\":false,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"resources\":{},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-dex-server\"},\"servicePortGrpc\":5557,\"servicePortGrpcName\":\"grpc\",\"servicePortHttp\":5556,\"servicePortHttpName\":\"http\",\"servicePortMetrics\":5558,\"tolerations\":[],\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"}],\"volumes\":[{\"emptyDir\":{},\"name\":\"static-files\"}]},\"fullnameOverride\":\"\",\"global\":{\"hostAliases\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"quay.io/argoproj/argocd\",\"tag\":\"v2.1.1\"},\"imagePullSecrets\":[],\"networkPolicy\":{\"create\":false,\"defaultDenyIngress\":false},\"podAnnotations\":{},\"podLabels\":{},\"securityContext\":{}},\"kubeVersionOverride\":\"\",\"nameOverride\":\"argocd\",\"openshift\":{\"enabled\":false},\"redis\":{\"affinity\":{},\"containerPort\":6379,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"redis\",\"tag\":\"6.2.4-alpine\"},\"name\":\"redis\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"securityContext\":{\"runAsNonRoot\":true,\"runAsUser\":999},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":false,\"create\":false,\"name\":\"\"},\"servicePort\":6379,\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"redis-ha\":{\"enabled\":false,\"exporter\":{\"enabled\":true},\"haproxy\":{\"enabled\":true,\"metrics\":{\"enabled\":true}},\"image\":{\"tag\":\"6.2.4-alpine\"},\"persistentVolume\":{\"enabled\":false},\"redis\":{\"config\":{\"save\":\"\\\"\\\"\"},\"masterGroupName\":\"argocd\"}},\"repoServer\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"containerPort\":8081,\"containerSecurityContext\":{},\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8084},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"relabelings\":[]}},\"name\":\"repo-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8081,\"portName\":\"https-repo-server\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":false},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"server\":{\"GKEbackendConfig\":{\"enabled\":false,\"spec\":{}},\"additionalApplications\":[],\"additionalProjects\":[],\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"certificate\":{\"additionalHosts\":[],\"domain\":\"argocd.example.com\",\"enabled\":false,\"issuer\":{\"kind\":null,\"name\":null},\"secretName\":\"argocd-server-tls\"},\"clusterAdminAccess\":{\"enabled\":true},\"config\":{\"application.instanceLabelKey\":\"argocd.argoproj.io/instance\",\"url\":\"https://argocd.example.com\"},\"configAnnotations\":{},\"configEnabled\":true,\"containerPort\":8080,\"containerSecurityContext\":{},\"env\":[],\"envFrom\":[],\"extraArgs\":[],\"extraContainers\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"ingress\":{\"annotations\":{\"kubernetes.io/ingress.class\":\"nginx\"},\"enabled\":false,\"extraPaths\":[],\"hosts\":[\"argocd.gitops.pliniogsnascimento.dev\"],\"https\":true,\"ingressClassName\":\"nginx\",\"labels\":{},\"pathType\":\"Prefix\",\"paths\":[\"/\"],\"tls\":[]},\"ingressGrpc\":{\"annotations\":{},\"awsALB\":{\"backendProtocolVersion\":\"HTTP2\",\"serviceType\":\"NodePort\"},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"ingressClassName\":\"\",\"isAWSALB\":false,\"labels\":{},\"pathType\":\"Prefix\",\"paths\":[\"/\"],\"tls\":[]},\"lifecycle\":{},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8083},\"serviceMonitor\":{\"enabled\":false,\"interval\":\"30s\",\"metricRelabelings\":[],\"relabelings\":[]}},\"name\":\"server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"rbacConfig\":{},\"rbacConfigAnnotations\":{},\"rbacConfigCreate\":true,\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"route\":{\"enabled\":false,\"hostname\":\"\"},\"service\":{\"annotations\":{},\"externalIPs\":[],\"externalTrafficPolicy\":\"\",\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"namedTargetPort\":true,\"nodePortHttp\":30080,\"nodePortHttps\":30443,\"servicePortHttp\":80,\"servicePortHttpName\":\"http\",\"servicePortHttps\":443,\"servicePortHttpsName\":\"https\",\"sessionAffinity\":\"\",\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"name\":\"argocd-server\"},\"staticAssets\":{\"enabled\":true},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]}}",
                "version": "4.8.3"
              }
            ],
            "name": "argo-cd",
            "namespace": "argocd",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "failed",
            "timeout": 300,
            "values": [
              "## ArgoCD configuration\n## Ref: https://github.com/argoproj/argo-cd\n##\nnameOverride: argocd\nfullnameOverride: \"\"\nkubeVersionOverride: \"\"\n\nglobal:\n  image:\n    repository: quay.io/argoproj/argocd\n    tag: v2.1.1\n    imagePullPolicy: IfNotPresent\n  ## Annotations applied to all pods\n  podAnnotations: {}\n  ## Labels applied to all pods\n  podLabels: {}\n  securityContext: {}\n  #  runAsUser: 999\n  #  runAsGroup: 999\n  #  fsGroup: 999\n  imagePullSecrets: []\n  hostAliases: []\n  # - ip: 10.20.30.40\n  #   hostnames:\n  #   - git.myhostname\n\n  networkPolicy:\n    create: false\n    defaultDenyIngress: false\n\n# Override APIVersions\n# If you want to template helm charts but cannot access k8s API server\n# you can set api versions here\napiVersionOverrides:\n  certmanager: \"\" # cert-manager.io/v1\n  ingress: \"\" # networking.k8s.io/v1beta1\n\n## Create clusterroles that extend existing clusterroles to interact with argo-cd crds\n## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles\ncreateAggregateRoles: false\n\n## Controller\ncontroller:\n  name: application-controller\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  # If changing the number of replicas you must pass the number as ARGOCD_CONTROLLER_REPLICAS as an environment variable\n  replicas: 1\n\n  # Deploy the application as a StatefulSet instead of a Deployment, this is required for HA capability.\n  # This is a feature flag that will become the default in chart version 3.x\n  enableStatefulSet: false\n\n  ## Argo controller commandline flags\n  args:\n    statusProcessors: \"20\"\n    operationProcessors: \"10\"\n    appResyncPeriod: \"180\"\n    selfHealTimeout: \"5\"\n    repoServerTimeoutSeconds: \"60\"\n\n  ## Argo controller log format: text|json\n  logFormat: text\n  ## Argo controller log level\n  logLevel: info\n\n  ## Additional command line arguments to pass to argocd-controller\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-controller\n  ##\n  env:\n    []\n    # - name: \"ARGOCD_CONTROLLER_REPLICAS\"\n    #   value: \"\"\n\n  ## envFrom to pass to argocd-controller\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n    # runAsNonRoot: true\n\n  ## Configures the controller port\n  containerPort: 8082\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Controller service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8082\n    portName: https-controller\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  resources: {}\n  #  limits:\n  #    cpu: 500m\n  #    memory: 512Mi\n  #  requests:\n  #    cpu: 250m\n  #    memory: 256Mi\n\n  serviceAccount:\n    create: true\n    name: argocd-application-controller\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Server metrics controller configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8082\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n      relabelings: []\n      metricRelabelings: []\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n    rules:\n      enabled: false\n      spec: []\n      # - alert: ArgoAppMissing\n      #   expr: |\n      #     absent(argocd_app_info)\n      #   for: 15m\n      #   labels:\n      #     severity: critical\n      #   annotations:\n      #     summary: \"[ArgoCD] No reported applications\"\n      #     description: \u003e\n      #       ArgoCD has not reported any applications data for the past 15 minutes which\n      #       means that it must be down or not functioning properly.  This needs to be\n      #       resolved for this cloud to continue to maintain state.\n      # - alert: ArgoAppNotSynced\n      #   expr: |\n      #     argocd_app_info{sync_status!=\"Synced\"} == 1\n      #   for: 12h\n      #   labels:\n      #     severity: warning\n      #   annotations:\n      #     summary: \"[{{`{{$labels.name}}`}}] Application not synchronized\"\n      #     description: \u003e\n      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over\n      #       12 hours which means that the state of this cloud has drifted away from the\n      #       state inside Git.\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n  ## Enable Custom Rules for the Application Controller's Cluster Role resource\n  ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n  ## Defaults to off\n  clusterRoleRules:\n    enabled: false\n    rules: []\n\n\n## Dex\ndex:\n  enabled: true\n  name: dex-server\n\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n      relabelings: []\n      metricRelabelings: []\n      # selector:\n      #   prometheus: kube-prometheus\n      # namespace: monitoring\n      # additionalLabels: {}\n\n  image:\n    repository: ghcr.io/dexidp/dex\n    tag: v2.30.0\n    imagePullPolicy: IfNotPresent\n  initImage:\n    repository:\n    tag:\n    imagePullPolicy:\n\n  ## Environment variables to pass to the Dex server\n  ##\n  env: []\n\n  ## envFrom to pass to the Dex server\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to the Dex server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Dex server pods\n  ##\n  podLabels: {}\n\n  ## Probes for Dex server\n  ## Supported from Dex \u003e= 2.28.0\n  livenessProbe:\n    enabled: false\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  readinessProbe:\n    enabled: false\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  serviceAccount:\n    create: true\n    name: argocd-dex-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts:\n    - name: static-files\n      mountPath: /shared\n\n  ## Additional volumes to the controller pod.\n  volumes:\n    - name: static-files\n      emptyDir: {}\n\n  ## Dex deployment container ports\n  containerPortHttp: 5556\n  servicePortHttp: 5556\n  servicePortHttpName: http\n  containerPortGrpc: 5557\n  servicePortGrpc: 5557\n  servicePortGrpcName: grpc\n  containerPortMetrics: 5558\n  servicePortMetrics: 5558\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 32Mi\n\n## Redis\nredis:\n  enabled: true\n  name: redis\n\n  image:\n    repository: redis\n    tag: 6.2.4-alpine\n    imagePullPolicy: IfNotPresent\n\n  ## Additional command line arguments to pass to redis-server\n  ##\n  extraArgs: []\n  # - --bind\n  # - \"0.0.0.0\"\n\n  containerPort: 6379\n  servicePort: 6379\n\n  ## Environment variables to pass to the Redis server\n  ##\n  env: []\n\n  ## envFrom to pass to the Redis server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Annotations to be added to the Redis server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Redis server pods\n  ##\n  podLabels: {}\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  ## Redis Pod specific security context\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 999\n\n  serviceAccount:\n    create: false\n    name: \"\"\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: false\n\n  resources: {}\n  #  limits:\n  #    cpu: 200m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  volumeMounts: []\n  volumes: []\n\n# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)\n# the custom redis deployment is omitted\nredis-ha:\n  enabled: false\n  # Check the redis-ha chart for more properties\n  exporter:\n    enabled: true\n  persistentVolume:\n    enabled: false\n  redis:\n    masterGroupName: argocd\n    config:\n      save: '\"\"'\n  haproxy:\n    enabled: true\n    metrics:\n      enabled: true\n  image:\n    tag: 6.2.4-alpine\n\n## Server\nserver:\n  name: server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-server\n  ##\n  extraArgs: []\n  #  - --insecure\n\n  # This flag is used to either remove or pass the CLI flag --staticassets /shared/app to the argocd-server app\n  staticAssets:\n    enabled: true\n\n  ## Environment variables to pass to argocd-server\n  ##\n  env: []\n\n  ## envFrom to pass to argocd-server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Specify postStart and preStop lifecycle hooks for your argo-cd-server container\n  ##\n  lifecycle: {}\n\n  ## Argo server log format: text|json\n  logFormat: text\n  ## Argo server log level\n  logLevel: info\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Configures the server port\n  containerPort: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 50m\n  #    memory: 64Mi\n\n  ## Certificate configuration\n  certificate:\n    enabled: false\n    domain: argocd.example.com\n    issuer:\n      kind: # ClusterIssuer\n      name: # letsencrypt\n    additionalHosts: []\n    secretName: argocd-server-tls\n\n  ## Server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    type: ClusterIP\n    ## For node port default ports\n    nodePortHttp: 30080\n    nodePortHttps: 30443\n    servicePortHttp: 80\n    servicePortHttps: 443\n    servicePortHttpName: http\n    servicePortHttpsName: https\n    namedTargetPort: true\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n    externalIPs: []\n    externalTrafficPolicy: \"\"\n    sessionAffinity: \"\"\n\n  ## Server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8083\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n      relabelings: []\n      metricRelabelings: []\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  serviceAccount:\n    create: true\n    name: argocd-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ingress:\n    enabled: false\n    annotations:\n      kubernetes.io/ingress.class: nginx\n    labels: {}\n    ingressClassName: \"nginx\"\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      # - argocd.example.com\n      - argocd.gitops.pliniogsnascimento.dev\n    paths:\n      - /\n    pathType: Prefix\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n      ## for Kubernetes \u003e=1.19 (when \"networking.k8s.io/v1\" is used)\n      # - path: /*\n      #   pathType: Prefix\n      #   backend:\n      #     service:\n      #       name: ssl-redirect\n      #       port:\n      #         name: use-annotation\n    tls:\n      []\n      # - secretName: argocd-tls-certificate\n      #   hosts:\n      #     - argocd.example.com\n    https: true\n  # dedicated ingress for gRPC as documented at\n  # https://argoproj.github.io/argo-cd/operator-manual/ingress/\n  ingressGrpc:\n    enabled: false\n    isAWSALB: false\n    annotations: {}\n    labels: {}\n    ingressClassName: \"\"\n\n    awsALB:\n      ## Service Type if isAWSALB is set to true\n      ## Can be of type NodePort or ClusterIP depending on which mode you are\n      ## are running. Instance mode needs type NodePort, IP mode needs type\n      ## ClusterIP\n      ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic\n      serviceType: NodePort\n      # This tells AWS to send traffic from the ALB using HTTP2. Can use GRPC as well if you want to leverage GRPC specific features\n      backendProtocolVersion: HTTP2\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      []\n      # - argocd.example.com\n    paths:\n      - /\n    pathType: Prefix\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n      ## for Kubernetes \u003e=1.19 (when \"networking.k8s.io/v1\" is used)\n      # - path: /*\n      #   pathType: Prefix\n      #   backend:\n      #     service:\n      #       name: ssl-redirect\n      #       port:\n      #         name: use-annotation\n    tls:\n      []\n      # - secretName: argocd-tls-certificate\n      #   hosts:\n      #     - argocd.example.com\n    https: false\n\n  # Create a OpenShift Route with SSL passthrough for UI and CLI\n  # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain\n  # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:\n  # If 'hostname' is an empty string \"\" OpenShift will create a hostname for you.\n  route:\n    enabled: false\n    hostname: \"\"\n\n  ## ArgoCD config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml\n  configEnabled: true\n  config:\n    # Argo CD's externally facing base URL (optional). Required when configuring SSO\n    url: https://argocd.example.com\n    # Argo CD instance label key\n    application.instanceLabelKey: argocd.argoproj.io/instance\n\n    # DEPRECATED: Please instead use configs.credentialTemplates and configs.repositories\n    # repositories: |\n    #   - url: git@github.com:group/repo.git\n    #     sshPrivateKeySecret:\n    #       name: secret-name\n    #       key: sshPrivateKey\n    #   - type: helm\n    #     url: https://charts.helm.sh/stable\n    #     name: stable\n    #   - type: helm\n    #     url: https://argoproj.github.io/argo-helm\n    #     name: argo\n\n    # oidc.config: |\n    #   name: AzureAD\n    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0\n    #   clientID: CLIENT_ID\n    #   clientSecret: $oidc.azuread.clientSecret\n    #   requestedIDTokenClaims:\n    #     groups:\n    #       essential: true\n    #   requestedScopes:\n    #     - openid\n    #     - profile\n    #     - email\n\n  ## Annotations to be added to ArgoCD ConfigMap\n  configAnnotations: {}\n\n  ## ArgoCD rbac config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md\n  rbacConfig:\n    {}\n    # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).\n    # Policy rules are in the form:\n    #   p, subject, resource, action, object, effect\n    # Role definitions and bindings are in the form:\n    #   g, subject, inherited-subject\n    # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.\n    # policy.csv: |\n    #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'\n    #   p, my-org:team-alpha, applications, sync, my-project/*, allow\n    #   # Grant all members of 'my-org:team-beta' admins\n    #   g, my-org:team-beta, role:admin\n    # policy.default is the name of the default role which Argo CD will falls back to, when\n    # authorizing API requests (optional). If omitted or empty, users may be still be able to login,\n    # but will see no apps, projects, etc...\n    # policy.default: role:readonly\n    # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\n    # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.\n    # scopes: '[cognito:groups, email]'\n\n  ## Annotations to be added to ArgoCD rbac ConfigMap\n  rbacConfigAnnotations: {}\n\n  # Boolean determining whether or not to create the configmap. If false, it is expected the configmap will be created\n  # by something else. ArgoCD will not work if there is no configMap created with the name above.\n  rbacConfigCreate: true\n\n  ## Not well tested and not well supported on release v1.0.0.\n  ## Applications\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalApplications: []\n  # - name: guestbook\n  #   namespace: argocd\n  #   additionalLabels: {}\n  #   additionalAnnotations: {}\n  #   project: guestbook\n  #   source:\n  #     repoURL: https://github.com/argoproj/argocd-example-apps.git\n  #     targetRevision: HEAD\n  #     path: guestbook\n  #     directory:\n  #       recurse: true\n  #  destination:\n  #     server: https://kubernetes.default.svc\n  #     namespace: guestbook\n  #  syncPolicy:\n  #    automated:\n  #      prune: false\n  #      selfHeal: false\n\n  ## Projects\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalProjects: []\n  # - name: guestbook\n  #   namespace: argocd\n  #   additionalLabels: {}\n  #   additionalAnnotations: {}\n  #   description: Example Project\n  #   sourceRepos:\n  #   - '*'\n  #   destinations:\n  #   - namespace: guestbook\n  #     server: https://kubernetes.default.svc\n  #   clusterResourceWhitelist: []\n  #   namespaceResourceBlacklist:\n  #   - group: ''\n  #     kind: ResourceQuota\n  #   - group: ''\n  #     kind: LimitRange\n  #   - group: ''\n  #     kind: NetworkPolicy\n  #     orphanedResources: {}\n  #     roles: []\n  #   namespaceResourceWhitelist:\n  #   - group: 'apps'\n  #     kind: Deployment\n  #   - group: 'apps'\n  #     kind: StatefulSet\n  #   orphanedResources: {}\n  #   roles: []\n  #   syncWindows:\n  #   - kind: allow\n  #     schedule: '10 1 * * *'\n  #     duration: 1h\n  #     applications:\n  #     - '*-prod'\n  #     manualSync: true\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n\n  ## Enable BackendConfig custom resource for Google Kubernetes Engine\n  GKEbackendConfig:\n    enabled: false\n    spec: {}\n  #  spec:\n  #    iap:\n  #      enabled: true\n  #      oauthclientCredentials:\n  #        secretName: argocd-secret\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  # - name: my-sidecar\n  #   image: nginx:latest\n  # - name: lemonldap-ng-controller\n  #   image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #   args:\n  #     - /lemonldap-ng-controller\n  #     - --alsologtostderr\n  #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #   env:\n  #     - name: POD_NAME\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.name\n  #     - name: POD_NAMESPACE\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.namespace\n  #   volumeMounts:\n  #   - name: copy-portal-skins\n  #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n## Repo Server\nrepoServer:\n  name: repo-server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  image:\n    repository: # defaults to global.image.repository\n    tag: # defaults to global.image.tag\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-repo-server\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-repo-server\n  ##\n  env: []\n\n  ## envFrom to pass to argocd-repo-server\n  ##\n  envFrom: []\n  # - configMapRef:\n  #     name: config-map-name\n  # - secretRef:\n  #     name: secret-name\n\n  ## Argo repoServer log format: text|json\n  logFormat: text\n  ## Argo repoServer log level\n  logLevel: info\n\n  ## Annotations to be added to repo server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to repo server pods\n  ##\n  podLabels: {}\n\n  ## Configures the repo server port\n  containerPort: 8081\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the repo server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the repo server pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n    # readOnlyRootFilesystem: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 64Mi\n\n  ## Repo server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8081\n    portName: https-repo-server\n\n  ## Repo server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8084\n    serviceMonitor:\n      enabled: false\n      interval: 30s\n      relabelings: []\n      metricRelabelings: []\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Repo server service account\n  ## If create is set to true, make sure to uncomment the name and update the rbac section below\n  serviceAccount:\n    create: false\n    #  name: argocd-repo-server\n    ## Annotations applied to created service account\n    annotations: {}\n    ## Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  ## Repo server rbac rules\n  # rbac:\n  #   - apiGroups:\n  #     - argoproj.io\n  #     resources:\n  #     - applications\n  #     verbs:\n  #     - get\n  #     - list\n  #     - watch\n\n  ## Use init containers to configure custom tooling\n  ## https://argoproj.github.io/argo-cd/operator-manual/custom_tools/\n  ## When using the volumes \u0026 volumeMounts section bellow, please comment out those above.\n  #  volumes:\n  #  - name: custom-tools\n  #    emptyDir: {}\n  #\n  #  initContainers:\n  #  - name: download-tools\n  #    image: alpine:3.8\n  #    command: [sh, -c]\n  #    args:\n  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - \u0026\u0026\n  #        mv linux-amd64/helm /custom-tools/\n  #    volumeMounts:\n  #      - mountPath: /custom-tools\n  #        name: custom-tools\n  #  volumeMounts:\n  #  - mountPath: /usr/local/bin/helm\n  #    name: custom-tools\n  #    subPath: helm\n\n## Argo Configs\nconfigs:\n  ## External Cluster Credentials\n  ## reference:\n  ## - https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#clusters\n  ## - https://argoproj.github.io/argo-cd/operator-manual/security/#external-cluster-credentials\n  clusterCredentials: []\n    # - name: mycluster\n    #   server: https://mycluster.com\n    #   labels: {}\n    #   annotations: {}\n    #   config:\n    #     bearerToken: \"\u003cauthentication token\u003e\"\n    #     tlsClientConfig:\n    #       insecure: false\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\n    # - name: mycluster2\n    #   server: https://mycluster2.com\n    #   labels: {}\n    #   annotations: {}\n    #   namespaces: namespace1,namespace2\n    #   config:\n    #     bearerToken: \"\u003cauthentication token\u003e\"\n    #     tlsClientConfig:\n    #       insecure: false\n    #       caData: \"\u003cbase64 encoded certificate\u003e\"\n\n  gpgKeysAnnotations: {}\n  gpgKeys: {}\n    # 4AEE18F83AFDEB23: |\n    #     -----BEGIN PGP PUBLIC KEY BLOCK-----\n    #\n    #     mQENBFmUaEEBCACzXTDt6ZnyaVtueZASBzgnAmK13q9Urgch+sKYeIhdymjuMQta\n    #     x15OklctmrZtqre5kwPUosG3/B2/ikuPYElcHgGPL4uL5Em6S5C/oozfkYzhwRrT\n    #     SQzvYjsE4I34To4UdE9KA97wrQjGoz2Bx72WDLyWwctD3DKQtYeHXswXXtXwKfjQ\n    #     7Fy4+Bf5IPh76dA8NJ6UtjjLIDlKqdxLW4atHe6xWFaJ+XdLUtsAroZcXBeWDCPa\n    #     buXCDscJcLJRKZVc62gOZXXtPfoHqvUPp3nuLA4YjH9bphbrMWMf810Wxz9JTd3v\n    #     yWgGqNY0zbBqeZoGv+TuExlRHT8ASGFS9SVDABEBAAG0NUdpdEh1YiAod2ViLWZs\n    #     b3cgY29tbWl0IHNpZ25pbmcpIDxub3JlcGx5QGdpdGh1Yi5jb20+iQEiBBMBCAAW\n    #     BQJZlGhBCRBK7hj4Ov3rIwIbAwIZAQAAmQEH/iATWFmi2oxlBh3wAsySNCNV4IPf\n    #     DDMeh6j80WT7cgoX7V7xqJOxrfrqPEthQ3hgHIm7b5MPQlUr2q+UPL22t/I+ESF6\n    #     9b0QWLFSMJbMSk+BXkvSjH9q8jAO0986/pShPV5DU2sMxnx4LfLfHNhTzjXKokws\n    #     +8ptJ8uhMNIDXfXuzkZHIxoXk3rNcjDN5c5X+sK8UBRH092BIJWCOfaQt7v7wig5\n    #     4Ra28pM9GbHKXVNxmdLpCFyzvyMuCmINYYADsC848QQFFwnd4EQnupo6QvhEVx1O\n    #     j7wDwvuH5dCrLuLwtwXaQh0onG4583p0LGms2Mf5F+Ick6o/4peOlBoZz48=\n    #     =Bvzs\n    #     -----END PGP PUBLIC KEY BLOCK-----\n\n  knownHostsAnnotations: {}\n  knownHosts:\n    data:\n      ssh_known_hosts: |\n        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\n        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\n        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n  tlsCertsAnnotations: {}\n  tlsCerts:\n    {}\n    # data:\n    #   argocd.example.com: |\n    #     -----BEGIN CERTIFICATE-----\n    #     MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    #     BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    #     BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    #     c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    #     Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    #     YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    #     MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    #     MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    #     NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    #     CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    #     P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    #     ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    #     YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    #     Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    #     Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    #     kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    #     kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    #     gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    #     bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    #     r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    #     BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    #     Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    #     CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    #     XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    #     +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    #     d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    #     OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    #     6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    #     jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    #     9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    #     +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    #     XWyb96wrUlv+E8I=\n    #     -----END CERTIFICATE-----\n## # Creates a secret with optional repository credentials\n## DEPRECATED: Instead, use configs.credentialTemplates and/or configs.repositories\n  repositoryCredentials: {}\n\n## Creates a secret for each key/value specified below to create repository credentials\n  credentialTemplates: {}\n    # github-enterprise-creds-1:\n    #   url: https://github.com/argoproj\n    #   githubAppID: 1\n    #   githubAppInstallationID: 2\n    #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3\n    #   githubAppPrivateKey: |\n    #     -----BEGIN OPENSSH PRIVATE KEY-----\n    #     ...\n    #     -----END OPENSSH PRIVATE KEY-----\n    # https-creds:\n    #   url: https://github.com/argoproj\n    #   password: my-password\n    #   username: my-username\n    # ssh-creds:\n    #  url: git@github.com:argoproj-labs\n    #  sshPrivateKey: |\n    #    -----BEGIN OPENSSH PRIVATE KEY-----\n    #    ...\n    #    -----END OPENSSH PRIVATE KEY-----\n\n## Creates a secret for each key/value specified below to create repositories\n## Note: the last example in the list would use a repository credential template, configured under \"configs.repositoryCredentials\".\n  repositories: {}\n    # istio-helm-repo:\n    #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts\n    #   name: istio.io\n    #   type: helm\n    # private-helm-repo:\n    #   url: https://my-private-chart-repo.internal\n    #   name: private-repo\n    #   type: helm\n    #   password: my-password\n    #   username: my-username\n    # private-repo:\n    #   url: https://github.com/argoproj/private-repo\n\n  secret:\n    createSecret: true\n    ## Annotations to be added to argocd-secret\n    ##\n    annotations: {}\n\n    # Webhook Configs\n    githubSecret: \"\"\n    gitlabSecret: \"\"\n    bitbucketServerSecret: \"\"\n    bitbucketUUID: \"\"\n    gogsSecret: \"\"\n\n    # Custom secrets. Useful for injecting SSO secrets into environment variables.\n    # Ref: https://argoproj.github.io/argo-cd/operator-manual/sso/\n    # Note that all values must be non-empty.\n    extra:\n      {}\n      # LDAP_PASSWORD: \"mypassword\"\n\n    # Argo TLS Data.\n    argocdServerTlsConfig:\n      {}\n      # key:\n      # crt: |\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003ccert data\u003e\n      #   -----END CERTIFICATE-----\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003cca cert data\u003e\n      #   -----END CERTIFICATE-----\n\n    # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with\n    # `htpasswd -nbBC 10 \"\" $ARGO_PWD | tr -d ':\\n' | sed 's/$2y/$2a/'`\n    # argocdServerAdminPassword: \"\"\n    # Password modification time defaults to current time if not set\n    # argocdServerAdminPasswordMtime: \"2006-01-02T15:04:05Z\"\n\n  ## Custom CSS Styles\n  ## Reference: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/\n  # styles: |\n  #  .nav-bar {\n  #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);\n  #  }\n\nopenshift:\n  enabled: false"
            ],
            "verify": false,
            "version": "4.8.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main",
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argocd",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "argocd"
                },
                "name": "argocd",
                "resource_version": "967",
                "uid": "584a9da0-cfef-4e39-b871-e64f74080182"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "aws_eks_cluster.gitops_eks",
            "aws_iam_role.eks-cluster-role",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSClusterPolicy",
            "aws_iam_role_policy_attachment.gitops-AmazonEKSVPCResourceController",
            "aws_subnet.private_subnet_1",
            "aws_subnet.private_subnet_2",
            "aws_subnet.private_subnet_3",
            "aws_subnet.public_subnet_1",
            "aws_subnet.public_subnet_2",
            "aws_subnet.public_subnet_3",
            "aws_vpc.eks_vpc",
            "data.aws_availability_zones.main"
          ]
        }
      ]
    }
  ]
}
